* Global configutation
** Variables
#+begin_src emacs-lisp :tangle yes
  (setq default-fill-column 100)
  (toggle-scrol-bar)
#+end_src
** Keep backup files in ~\~/.emacs.d/backup~
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
** Key bindings
#+BEGIN_SRC emacs-lisp
;(setq mac-command-modifier 'control)
;(setq mac-control-modifier 'command)
;(setq mac-caps-modifiers 'esc)
(set-register ?r '(file . "~/Dropbox/Notes/posts/posts_drafts.org")) ;open with ~C-x r j r~
(setq org-support-shift-select (quote always)) ;Non-nil means make shift-cursor commands select text when possible
(define-key global-map [remap list-buffers] 'buffer-menu-other-window) ;this will move focus to the buffer list when doing ~C-x C-b~
#+END_SRC 

#+RESULTS:
: esc

** Fontify code blocks
Not sure what it is doing, but had it in the original init file, and don't think it was implemented anywhere.

#+BEGIN_SRC emacs-lisp
;; fontify code in code blocks
(setq org-src-fontify-natively t)
#+END_SRC

** Smooth scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
(setq scroll-step 1)
(setq scroll-conservatively 1000)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse t)
#+END_SRC
** Electric Pair Mode
#+begin_src emacs-lisp :tangle yes
(electric-pair-mode 1)
;; make electric-pair-mode work on more brackets
(setq electric-pair-pairs '(
                            (?\" . ?\")
			    (?\` . ?\`)
			    (?\~ . ?\~)
			    (?\( . ?\))
                            (?\{ . ?\})
                            ) )
#+end_src

** Delete selection mode
Act like a modern editor - when making a selection and then starting to type, the selected text will be deleted, and replaced by the new one being typed.

#+begin_src emacs-lisp :tangle yes
(delete-selection-mode 1)
#+end_src
* Funcions
** package-list-installed-packages
#+begin_src emacs-lisp :tangle yes

(setq jpk-packages
      (package-refresh-contents))


(defun package-list-installed-packages ()
  "Like `package-list-packages', but shows only the packages that
  are installed and are not in `jpk-packages'.  Useful for
  cleaning out unwanted packages."
  (interactive)
  (package-show-package-list
   (remove-if-not (lambda (x) (and (not (memq x jpk-packages))
                            (not (package-built-in-p x))
                            (package-installed-p x)))
                  (mapcar 'car package-archive-contents))))
#+end_src
** Load init.el
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") (lambda() (interactive)(load-file "~/.emacs.d/init.el")))
#+END_SRC

** VI - open line
*** Reference
*** Code
#+BEGIN_SRC emacs-lisp
(defun vi-open-line-above ()
  "Insert a newline above the current line and put point at beginning."
  (interactive)
  (unless (bolp)
    (beginning-of-line))
  (newline)
  (forward-line -1)
  (indent-according-to-mode))

(defun vi-open-line-below ()
  "Insert a newline below the current line and put point at beginning."
  (interactive)
  (unless (eolp)
    (end-of-line))
  (newline-and-indent))

(defun vi-open-line (&optional abovep)
  "Insert a newline below the current line and put point at beginning.
With a prefix argument, insert a newline above the current line."
  (interactive "P")
  (if abovep
      (vi-open-line-above)
    (vi-open-line-below)))
#+END_SRC

*** Keybinding
#+BEGIN_SRC emacs-lisp
(define-key global-map [f7] 'vi-open-line)
#+END_SRC
** Rename file on spot
*** Reference
This is a funcion to change the name of the current buffer. I got it from this stackoverflow thread:
http://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs

*** Code
#+BEGIN_SRC emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

; Define the key-binding
(global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
#+END_SRC

** Comment or uncomment a line
*** Reference
- [[http://stackoverflow.com/questions/9688748/emacs-comment-uncomment-current-line][Emacs comment/uncomment current line]] - there is also an option to add ~(next-line)~, so after commenting or uncommenting, the point move to the next line.
- [[http://stackoverflow.com/questions/14905133/how-to-set-cmd-key-binding-in-emacs][How to set the command key]]
  
*** Code
:CUSTOM_ID: comment-or-uncomment
#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))
#+END_SRC
*** Keybinding
#+BEGIN_SRC emacs-lisp

#+END_SRC

** Transpose buffer
#+BEGIN_SRC emacs-lisp
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
#+END_SRC

** Show file name and path
#+BEGIN_SRC emacs-lisp
(defun show-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name))
)
(global-set-key "\C-cz" 'show-file-name)
#+END_SRC
* Packages
** El-get
#+BEGIN_SRC emacs-lisp
;;; Load el-get to path, otherwise use-package won't work
(add-to-list 'load-path "~/.emacs.d/el-get/el-get/")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))
(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
#+END_SRC
** Deft
*** Reference
http://jblevins.org/projects/deft/

*** Package loading
 
#+BEGIN_SRC emacs-lisp
;; Deft (this is an nvAlt like plugin)

(use-package deft
:ensure t
:init
:config
(setq deft-default-extension "org")
(setq deft-extensions '("org" "txt" "text" "md" "markdown"))
(setq deft-directory "~/Dropbox/Notes/")
(setq deft-archive-directory "~/Dropbox/Notes/archive/") 
(setq deft-text-mode 'org-mode)
(setq deft-use-filename-as-title t)
(setq deft-use-filter-string-for-filename t)
;(setq deft-recursive t)  ;this will search also within sub-directories
)
#+END_SRC
*** Keybindings
    
#+BEGIN_SRC emacs-lisp

(global-set-key [f8] 'deft); open Deft with F8

#+END_SRC

** Dired-x
*** Package loading
#+BEGIN_SRC emacs-lisp
(autoload 'dired-jump "dired-x"
  "Jump to Dired buffer corresponding to current buffer." t)

(autoload 'dired-jump-other-window "dired-x"
  "Like \\[dired-jump] (dired-jump) but in other window." t)

(define-key global-map "\C-x\C-j" 'dired-jump)
(define-key global-map "\C-x4\C-j" 'dired-jump-other-window)

#+END_SRC
** htmlize
*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package htmlize
:ensure t)

#+END_SRC
** Ace Jump Mode

*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:ensure t
:init
(bind-key "C-c C-," 'ace-jump-mode))
#+END_SRC
** Auto complete
*** Documentation
**** Manual
http://auto-complete.org/doc/manual.html
**** Keybindings to remember
- ~M-n~ and ~M-p~ to select
- ~RET~ to complete
- ~F1~ to open help in other buffer
- ~C-s~ to filter the auto-complete options 
*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config (global-auto-complete-mode t))
#+END_SRC
** Magit
*** Documentation
- [[http://magit.vc/manual/magit.html][Magit User Manual]]
*** Load package
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:init
(global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC
** org2blog
*** Loading package
#+BEGIN_SRC emacs-lisp
;(use-package org2blog
;:ensure t)

(setq org2blog/wp-blog-alist
      '(("prodissues.com"
         :url "http://prodissues.com/xmlrpc.php"
         :username "yaniv"
         :default-title "Hello World"
         :default-categories ("org2blog" "emacs")
         :tags-as-categories nil)
        ("localhost"
         :url "http://localhost:8888/xmlrpc.php"
	 url: "localhost:8888/xmlrpc.php"
         :username "yaniv")))

#+END_SRC

** Ivy-mode
*** Reference
- [[https://github.com/abo-abo/swiper/blob/master/doc/ivy.org][Manual]]
- [[http://oremacs.com][Homepage]]
- [[https://github.com/abo-abo/swiper][Git]]
- [[https://www.youtube.com/watch?v%3DVvnJQpTFVDc][Video demo]]
*** Load package
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper
:ensure t
:init
(ivy-mode 1)
(global-set-key "\C-s" 'swiper)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) "))
#+END_SRC

** Avy-mode
#+begin_src emacs-lisp :tangle yes
  (use-package avy
  :ensure t
  :config
  (global-set-key (kbd "C-c j") 'avy-goto-word-or-subword-1)
  (global-set-key (kbd "s-.") 'avy-goto-word-or-subword-1)
  (global-set-key (kbd "s-w") 'ace-window)
  )
#+end_src
** yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:init
(yas-global-mode 1))

#+END_SRC
** Abbrev
#+BEGIN_SRC emacs-lisp
;; Note that emacs chooses, by default, the filename
;; "~/.abbrev_defs", so don't try to be too clever
;; by changing its name
(setq-default abbrev-mode t)
(read-abbrev-file "~/.emacs.d/.abbrev_defs")
(setq save-abbrevs t)
#+END_SRC
** Undo-tree
*** Reference
[[http://cestlaz.github.io/posts/using-emacs-16-undo-tree/][cestlaz]]
*** Package loading
#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
:ensure t
:init
(global-undo-tree-mode)
)
#+end_src
* Writing aids
** Ispell
 #+BEGIN_SRC emacs-lisp
 ;; Add path to homebrew packages (that's where ispell installed)
 (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
 (setq exec-path (append exec-path '("/usr/local/bin")))
 #+END_SRC
** Typewriter mode
- If there are any problems with that mode, for example cursor move to a new line every so often, make sure that the following variables aren't set to true:
mode-require-final-newline
require-final-newline
*** Load package
 #+BEGIN_SRC emacs-lisp
 (use-package draft-mode
 :ensure t
) 
#+END_SRC
** Dictionaries
*** External dictionary

#+BEGIN_SRC emacs-lisp
(autoload 'ispell-get-word "ispell")
(defun lookup-word (word)
  (interactive (list (save-excursion (car (ispell-get-word nil)))))
  (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))

(global-set-key (kbd "M-#") 'lookup-word)
#+END_SRC
*** Synosaurus
**** Load package
#+BEGIN_SRC emacs-lisp :tangle no
(use-package synosaurus
:ensure t)

#+END_SRC
*** synonymous
**** Load package

#+BEGIN_SRC emacs-lisp
(use-package synonymous
:ensure t)
#+END_SRC

**** Keybinding

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'synonymous-synonyms)
(global-set-key (kbd "C-c S") 'synonymous-antonyms)
#+END_SRC

*** define-word package
- Blog post about it - http://oremacs.com/2015/05/22/define-word/
**** Load package
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :pin melpa)

#+END_SRC

**** Keybinding
#+BEGIN_SRC emacs-lisp :tangle no
(global-set-key (kbd "C-c d") 'define-word-at-point)
(global-set-key (kbd "C-c D") 'define-word)

#+END_SRC
** Latex

 This is a change based on [[https://tug.org/mactex/UpdatingForElCapitan.pdf][this article]] by Herbert Schulz - a change that was made in the new osx version (El Capitan).
 #+BEGIN_SRC emacs-lisp
 (setenv "PATH" "/usr/local/bin:/Library/TeX/texbin/:$PATH" t)
 #+END_SRC

** wordsmith-mode
This is an iA Writer alternative for Emacs. It's a gramaric syntax highlighter. I use it when writing anything that isn't code, to get an overview of the verbs, nouns and adjectives that I've used. 

*** Reference
- [[https://github.com/istib/wordsmith-mode][GitHub repository]]
*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package wordsmith-mode
:ensure t)
#+END_SRC
** Fronend developement
*** HTML and CSS
**** emmet
 *****Package loading
 #+BEGIN_SRC emacs-lisp
 (use-package emmet-mode
 :ensure t
 :config
 (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
 (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
 )

 #+END_SRC

*** php
 #+BEGIN_SRC emacs-lisp :tangle no
 (use-package php-mode
 :ensure t)
 #+END_SRC
** MoveText
Enables moving text around using ~M-up~ and ~M-down~, as possible in org-mode.
*** Reference
[[https://github.com/emacsfodder/move-text][Github]]
*** Package loading
#+begin_src emacs-lisp :tangle yes
(use-package move-text
:ensure t
:config
(move-text-default-bindings))
#+end_src
** Visual Fill Column
#+begin_src emacs-lisp :tangle yes
(use-package visual-fill-column
  :ensure t
  :defer t
  :bind (("C-c t v" . visual-fill-column-mode))
  :init
  (dolist (hook '(visual-line-mode-hook
                  prog-mode-hook
                  text-mode-hook))
    (add-hook hook #'visual-fill-column-mode))
  :config (setq-default visual-fill-column-center-text t
                        visual-fill-column-fringes-outside-margins nil))
#+end_src
** Writeroom-mode
#+begin_src emacs-lisp :tangle yes
(use-package writeroom-mode
:ensure t
)
#+end_src

* Modes
** Markdown

#+BEGIN_SRC emacs-lisp
;; Markdown mode
;; Markdown
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(put 'narrow-to-region 'disabled nil)
#+END_SRC

** Org
*** Package loading
#+BEGIN_SRC emacs-lisp
;; Agenda files
(setq org-agenda-files (list "~/Dropbox/Notes/"))

;;keybindings
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
#+END_SRC

*** Babel
Need to tell babel which languages it should recognize

#+BEGIN_SRC emacs-lisp
; Some initial langauges we want org-babel to support
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (js . t)
   (python . t)
   (ruby . t)
   (sqlite . t)
   (perl . t)
   ))
#+END_SRC

*** Refiling subtree to other file
My usecase - I keep all my drafts in one big org file (available [[http://www.prodissues.com/posts_drafts/][here]]). What I want to be able to do is once finishing to write a post, move it with all its footnotes to a new file, that will turn out to be the post file that is then exported to and processed by Pelican. 

**** Here's a function I [[http://emacs.stackexchange.com/questions/14788/org-mode-refile-to-other-files-does-not-work][found]], that claims to do just that:

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '(
   (nil :maxlevel . 2)             ; refile to headings in the current buffer
   (org-agenda-files :maxlevel . 2) ; refile to any of these files
    ))
#+END_SRC

**** Here's another function 
Source - http://superuser.com/a/568300/525565
This one works. The only problem is that it doesn't move the footnotes with the subtrees.

#+BEGIN_SRC emacs-lisp

(require 'org-element)

(defun me/org-file-from-subtree (&optional name)
"Cut the subtree currently being edited and create a new file
from it.

If called with the universal argument, prompt for new filename,
otherwise use the subtree title."
  (interactive "P")
  (org-back-to-heading)
  (let ((filename (cond
                   (current-prefix-arg
                    (expand-file-name
                     (read-file-name "New file name: ")))
                   (t
                    (concat
                     (expand-file-name
                      (org-element-property :title
                                            (org-element-at-point))
                      default-directory)
                     ".org")))))
    (org-cut-subtree)
    (find-file-noselect filename)
    (with-temp-file filename
      (org-mode)
      (yank))))
#+END_SRC

*** Org-Reveal
**** Repo
https://github.com/yjwen/org-reveal
**** Package loading
#+BEGIN_SRC emacs-lisp

 (use-package ox-reveal
 :ensure t
 :config
 (setq org-reveal-root "~/dev/reveal/reveal.js"))

#+END_SRC

** Email
*** Mu4e
#+BEGIN_SRC emacs-lisp 
;; the exact path may differ -- check it
(add-to-list 'load-path "/usr/local/Cellar/mu/mu4e")
(setq mu4e-mu-binary (executable-find "/usr/local/Cellar/mu/mu/mu"))

(require  'mu4e)
(setq mu4e-maildir "~/Maildir")

;; default
(setq mu4e-maildir "~/Maildir")
(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Trash")
(setq mu4e-refile-folder  "/[Gmail].All Mail")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; (See the documentation for `mu4e-sent-messages-behavior' if you have
;; additional non-Gmail addresses and want assign them different
;; behavior.)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
    '( ("/INBOX"               . ?i)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap"
      mu4e-update-interval 300)             ;; update every 5 minutes)

;; something about ourselves
(setq
   user-mail-address "yanivdll@gmail.com"
   user-full-name  "Yaniv Gilad"
   mu4e-compose-signature
    (concat
      "--\n"
      "http://prodissues.com\n"))

;; alternatively, for emacs-24 you can use:
(setq message-send-mail-function 'smtpmail-send-it
     smtpmail-stream-type 'ssl
     smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
     smtpmail-default-smtp-server "smtp.gmail.com"
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 465)

;; don't save messages to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; skipping duplicate messages (due to the way the labels / virtual folders in Gmail are represented)
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

**** Adding support for html emails

#+BEGIN_SRC emacs-lisp
;; use Emac's 24.4 shr html renderer
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)

;; define keybindings for intuitive link navigation within an email, using tab and backtab (shift-tab)
(add-hook 'mu4e-view-mode-hook
  (lambda()
     ;; try to emulate some of the eww key-bindings
    (local-set-key (kbd "<tab>") 'shr-next-link)
    (local-set-key (kbd "<backtab>") 'shr-previous-link)))

#+END_SRC

**** Additional customizations
#+BEGIN_SRC emacs-lisp
;; Set the number of messages to show on the header view, when in split view
(setq mu4e-headers-visible-lines 12)

;; smart From/To field in the headers view
(setq mu4e-user-mail-address-list '("yanivdll@gmail.com" "yanivalerts@gmail.com"))

;; Saving attachments to a specific folder
(setq mu4e-attachment-dir  "~/Downloads")

;; enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
   (imagemagick-register-types))
#+END_SRC

;; enable attachments from dired
#+BEGIN_SRC emacs-lisp 
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC
** Python
*** Set parser to work with python3
The following re-defines the ~python-shell-parse-command~. 
Currently, when I'm in a python file, and type ~C-c C-c~, I get the prompt "/usr/bin/python -i", which evaluate the file using python2.7. 

#+BEGIN_SRC emacs-lisp
(require 'python)
(defun python-shell-parse-command ()
  "Return the string used to execute the inferior Python process."
  "python3 -i"
  )
#+END_SRC
* Look and feel
** Themes
*** Disable all other themes before enabling a new one. 
This should help avoide unwanted inheritance between different themes, and the unexpected results of that.
#+BEGIN_SRC emacs-lisp
 ;;; Disable all themes before loading a new one
 (defadvice load-theme (before theme-dont-propagate activate)
  (mapc 'disable-theme custom-enabled-themes))
#+END_SRC
*** solarized-emacs (CURRENT)
**** Repo
https://github.com/bbatsov/solarized-emacs
**** Load theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
:ensure t
:config 
(load-theme 'solarized-light t)
(setq solarized-scale-org-headlines nil))

#+END_SRC
*** Dichromacy (INACTIVE)
#+BEGIN_SRC emacs-lisp :tangle no
(load-theme 'dichromacy t)
#+END_SRC
** Colors
*** Change the background color
I like the background color Xah uses in his screenshots, and he provided me with the settings.

#+BEGIN_SRC emacs-lisp :tangle no
(set-background-color "honeydew")
#+END_SRC
** Fonts
*** Input fonts
**** Reference
- Learned about it first in [[https://blog.fugue.co/2015-11-11-guide-to-emacs.html][A CEO's Guide to Emacs]]
- [[http://input.fontbureau.com/][Link to the input site]]
**** Settings
 #+BEGIN_SRC emacs-lisp
 ;; set up fonts for different OS's
 (setq myfont "Input")
 (set-face-attribute 'default nil :font myfont :height 144)
 #+END_SRC
* Internet Relay Chat

  IRC is a great way to hang out with other Emacs geeks.
  #+begin_src emacs-lisp
    (use-package erc
      :ensure t :defer t
      :config
      (setq erc-hide-list '("PART" "QUIT" "JOIN"))
      (setq erc-autojoin-channels-alist '(("freenode.net"
                                           "#org-mode"
                                           "#emacs"
             "#emacs-beginners"))
            erc-server "irc.freenode.net"
            erc-nick "yanivg"))
  #+end_src

* Temp
** Multiple cursors
*** Reference
*** Package loading
 #+BEGIN_SRC emacs-lisp
 (use-package multiple-cursors
 :ensure t
 :pin melpa)

 (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
 (global-set-key (kbd "C->") 'mc/mark-next-like-this)
 (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
 (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
 #+END_SRC

** Languagetool
*** Reference
- [[https://github.com/mhayashi1120/Emacs-langtool][Languagetool for emacs]]
- [[https://www.languagetool.org][Official site]]

*** Package Loading
#+BEGIN_SRC emacs-lisp
(use-package langtool
:ensure t
:init
(setq langtool-language-tool-jar "~/Downloads/LanguageTool-3.2/languagetool-commandline.jar")
(setq langtool-default-language "en-US"))

#+END_SRC
** Expand-region
*** Reference
- [[https://github.com/magnars/expand-region.el][Github repository]]
- [[http://emacsrocks.com/e09.html][Emacs rocks!]]
*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package expand-region
:ensure t
:init
(global-set-key (kbd "C-=") 'er/expand-region))

#+END_SRC
** Key chord
#+begin_src emacs-lisp :tangle no
  (use-package key-chord
  :ensure t
  :config
  (key-chord-mode t)
  (setq key-chord-two-keys-delay 0.3) ;;default 0.1
  (key-chord-define-global "jj" 'forward-char)
  (key-chord-define-global "hh" 'backward-char)
  (key-chord-define-global "ff" 'forward-word)
  (key-chord-define-global "bb" 'backward-word)
  (key-chord-define-global "dw" 'kill-word)
  (key-chord-define-global "dc" 'kill-char)
  (key-chord-define-global "xx" 'execute-extended-command)
  (key-chord-define-global "gg" 'keyboard-quit)
  )


#+end_src
** Powerline theme
#+begin_src emacs-lisp :tangle yes
(use-package powerline
:ensure t
:init
(powerline-default-theme)
)
#+end_src
* Inactive packages
** Plugins

#+BEGIN_SRC emacs-lisp :tangle no
;; path to where plugins are kept
;;(setq plugin-path "~/.emacs.d/lisp/")
(let ((default-directory "~/.emacs.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** Evil (INACTIVE)
*** Package loading

#+BEGIN_SRC emacs-lisp :tangle no
;; Evil mode

(use-package evil
;:ensure t  ;I commented this out because it kept downloading it from elpa, where there is an old version
:config 
(evil-mode 1)
)
#+END_SRC

*** Key bindings

#+BEGIN_SRC emacs-lisp :tangle no
; Modify keybindings for N state
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "$") 'evil-end-of-visual-line)
(define-key evil-normal-state-map (kbd "0") 'evil-beginning-of-visual-line)

; Modify keybindings for V state
(define-key evil-visual-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-visual-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-visual-state-map (kbd "$") 'evil-end-of-visual-line)
(define-key evil-visual-state-map (kbd "0") 'evil-beginning-of-visual-line)

;When in deft this keybinding will open the note in another window
(define-key evil-normal-state-map (kbd "C-o")'deft-open-file-other-window) 
#+END_SRC

**** TODO Load chord-keys to allow 'dd' to delete visual line
** centered-cursor (INACTIVE)
*** Reference
- [[http://melpa.org/#/centered-cursor-mode][Melpa]]
*** Package loading
I've inactivated it because it caused to a wacky experience when scrolling down the screen and reaching the bottom.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package centered-cursor-mode
:ensure t
:pin melpa
:config
(global-centered-cursor-mode +1))
#+END_SRC
** Boon (command mode)
#+begin_src emacs-lisp :tangle no
  (use-package boon
  :ensure t
  :init
  (require 'boon-qwerty)
  (require 'boon-powerline)
  :config
  (boon-mode)
  )
  (boon-powerline-theme)
#+end_src

