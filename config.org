* Global configutation
** Key bindings
#+BEGIN_SRC emacs-lisp
;(setq mac-command-modifier 'control)
;(setq mac-control-modifier 'command)
;(setq mac-caps-modifiers 'esc)
(set-register ?r '(file . "~/Dropbox/Notes/posts/pages/posts_drafts.org"))
(setq org-support-shift-select (quote always)) ;Non-nil means make shift-cursor commands select text when possible
(define-key global-map [remap list-buffers] 'buffer-menu-other-window) ;this will move focus to the buffer list when doing ~C-x C-b~
#+END_SRC 

#+RESULTS:
: esc

** Fontify code blocks
Not sure what it is doing, but had it in the original init file, and don't think it was implemented anywhere.

#+BEGIN_SRC emacs-lisp
;; fontify code in code blocks
(setq org-src-fontify-natively t)
#+END_SRC

** Plugins

#+BEGIN_SRC emacs-lisp
;; path to where plugins are kept
;;(setq plugin-path "~/.emacs.d/lisp/")
(let ((default-directory "~/.emacs.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** Ispell

#+BEGIN_SRC emacs-lisp
;; Add path to homebrew packages (that's where ispell installed)
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC
   
* Funcions
** Load init.el
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") (lambda() (interactive)(load-file "~/.emacs.d/init.el")))
#+END_SRC

** VI - open line
*** Reference
*** Code
#+BEGIN_SRC emacs-lisp
(defun vi-open-line-above ()
  "Insert a newline above the current line and put point at beginning."
  (interactive)
  (unless (bolp)
    (beginning-of-line))
  (newline)
  (forward-line -1)
  (indent-according-to-mode))

(defun vi-open-line-below ()
  "Insert a newline below the current line and put point at beginning."
  (interactive)
  (unless (eolp)
    (end-of-line))
  (newline-and-indent))

(defun vi-open-line (&optional abovep)
  "Insert a newline below the current line and put point at beginning.
With a prefix argument, insert a newline above the current line."
  (interactive "P")
  (if abovep
      (vi-open-line-above)
    (vi-open-line-below)))
#+END_SRC



*** Keybinding
#+BEGIN_SRC emacs-lisp
(define-key global-map [f7] 'vi-open-line)
#+END_SRC
** Rename file on spot
*** Reference
This is a funcion to change the name of the current buffer. I got it from this stackoverflow thread:
http://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs

*** Code
#+BEGIN_SRC emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+END_SRC

*** Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
#+END_SRC 

** Comment or uncomment a line
*** Reference
- [[http://stackoverflow.com/questions/9688748/emacs-comment-uncomment-current-line][Emacs comment/uncomment current line]] - there is also an option to add ~(next-line)~, so after commenting or uncommenting, the point move to the next line.
- [[http://stackoverflow.com/questions/14905133/how-to-set-cmd-key-binding-in-emacs][How to set the command key]]
  
*** Code
:CUSTOM_ID: comment-or-uncomment
#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))
#+END_SRC
*** Keybinding
#+BEGIN_SRC emacs-lisp

#+END_SRC

** Transpose buffer
#+BEGIN_SRC emacs-lisp
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
#+END_SRC

* Packages
** El-get
#+BEGIN_SRC emacs-lisp
;;; Load el-get to path, otherwise use-package won't work
(add-to-list 'load-path "~/.emacs.d/el-get/el-get/")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))
(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
#+END_SRC
** Deft
*** Reference
http://jblevins.org/projects/deft/

*** Package loading
 
#+BEGIN_SRC emacs-lisp
;; Deft (this is an nvAlt like plugin)

(use-package deft
:ensure t
:init
:config
(setq deft-default-extension "org")
(setq deft-extensions '("org" "txt" "text" "md" "markdown"))
(setq deft-directory "~/Dropbox/Notes")
(setq deft-archive-directory "~/Dropbox/Notes/archive") 
(setq deft-text-mode 'org-mode)
(setq deft-use-filename-as-title t)
(setq deft-use-filter-string-for-filename t)
;(setq deft-recursive t)  ;this will search also within sub-directories
)
#+END_SRC
*** Keybindings
    
#+BEGIN_SRC emacs-lisp

(global-set-key [f8] 'deft); open Deft with F8

#+END_SRC

** Dired-x
*** Package loading
#+BEGIN_SRC emacs-lisp
(autoload 'dired-jump "dired-x"
  "Jump to Dired buffer corresponding to current buffer." t)

(autoload 'dired-jump-other-window "dired-x"
  "Like \\[dired-jump] (dired-jump) but in other window." t)

(define-key global-map "\C-x\C-j" 'dired-jump)
(define-key global-map "\C-x4\C-j" 'dired-jump-other-window)

#+END_SRC
** Helm

# #+BEGIN_SRC emacs-lisp
# (require 'helm)
# (require 'helm-config)

# ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
# ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
# ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
# (global-set-key (kbd "C-c h") 'helm-command-prefix)
# (global-unset-key (kbd "C-x c"))

# (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
# (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
# ;(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

# (when (executable-find "curl")
#   (setq helm-google-suggest-use-curl-p t))

# (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
#       helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
#       helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
#       helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
#       helm-ff-file-name-history-use-recentf t)

# (helm-mode 1)
# #+END_SRC

** htmlize
*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package htmlize
:ensure t)

#+END_SRC
** Ace Jump Mode

*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:ensure t
:init
(bind-key "C-c C-," 'ace-jump-mode))
#+END_SRC

** Undo tree mode - visualize your undos and branches
*** Source
Took this config from Sacha's config - http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline158
*** Package loading
#+BEGIN_SRC emacs-lisp
;(use-package undo-tree
;  :defer t
;  :ensure t
;  :diminish undo-tree-mode
;  :idle
;  (progn
;    (global-undo-tree-mode)
;    (setq undo-tree-visualizer-timestamps t)
;    (setq undo-tree-visualizer-diff t)))

#+END_SRC 
** Auto complete
*** Documentation
**** Manual
http://auto-complete.org/doc/manual.html
**** Keybindings to remember
- ~M-n~ and ~M-p~ to select
- ~RET~ to complete
- ~F1~ to open help in other buffer
- ~C-s~ to filter the auto-complete options 
*** Package loading
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config (global-auto-complete-mode t))
#+END_SRC
** Magit
*** Documentation
- [[http://magit.vc/manual/magit.html][Magit User Manual]]
*** Load package
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t)
#+END_SRC
** org2blog
*** Loading package
#+BEGIN_SRC emacs-lisp
;(use-package org2blog
;:ensure t)

(setq org2blog/wp-blog-alist
      '(("prodissues.com"
         :url "http://prodissues.com/xmlrpc.php"
         :username "yaniv"
         :default-title "Hello World"
         :default-categories ("org2blog" "emacs")
         :tags-as-categories nil)
        ("localhost"
         :url "http://localhost:8888/xmlrpc.php"
	 url: "prodissues.com/xmlrpc.php"
         :username "yaniv")))

#+END_SRC


* Modes
** Ido

#+BEGIN_SRC emacs-lisp
;; Ido mode
(require 'ido)
(ido-mode 1)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
;; Markdown mode
;; Markdown
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(put 'narrow-to-region 'disabled nil)
#+END_SRC

** Org
*** Package loading
#+BEGIN_SRC emacs-lisp
;; Org mode
;; fontify code in code blocks



;; Agenda files
(setq org-agenda-files (list "~/Dropbox/Notes/"))

;;keybindings
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
#+END_SRC

*** Babel
Need to tell babel which languages it should recognize

#+BEGIN_SRC emacs-lisp
; Some initial langauges we want org-babel to support
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (js . t)
   (python . t)
   (ruby . t)
   (sqlite . t)
   (perl . t)
   ))
#+END_SRC

*** Publish to pelican
I'm not sure this is relevant anymore, because I configured the org_reader plugin in pelican, so this publishing configuration isn't active, as far as I can tell.
# **** HTML
#+BEGIN_SRC emacs-lisp

;; This package seemed to be required in order to get syntax highlighting when 
;; publishing to pelican. No one knows why...
;(use-package color-theme-github
;:ensure t)

(require 'ox-publish)
;(use-package ox-publish)

(setq org-publish-project-alist
      '(

  ("org-prodissues"
          ;; Path to your org files.
          :base-directory "~/Dropbox/Notes/posts/"
          :base-extension "org"

          ;; Path to your Jekyll project.
          :publishing-directory "~/dev/prodissues/content/"
          :recursive t
          :publishing-function  org-html-publish-to-html
          :headline-levels 4 
          :html-extension "html"
          ;:body-only t ;; Only export section between <body> </body>
    )


    ("org-static-prodissues"
          :base-directory "~/Dropbox/Notes/posts/"
          :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
          :publishing-directory "~/Dropbox/Notes/"
          :recursive t
          :publishing-function org-publish-attachment)

    ("yan" :components ("org-prodissues"))

))

#+END_SRC

*** Refiling subtree to other file
My usecase - I keep all my drafts in one big org file (available [[http://www.prodissues.com/posts_drafts/][here]]). What I want to be able to do is once finishing to write a post, move it with all its footnotes to a new file, that will turn out to be the post file that is then exported to and processed by Pelican. 

**** Here's a function I [[http://emacs.stackexchange.com/questions/14788/org-mode-refile-to-other-files-does-not-work][found]], that claims to do just that:

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '(
   (nil :maxlevel . 2)             ; refile to headings in the current buffer
   (org-agenda-files :maxlevel . 2) ; refile to any of these files
    ))
#+END_SRC

**** Here's anpther function 
Source - http://superuser.com/a/568300/525565
This one works. The only problem is that it doesn't move the footnotes with the subtrees.

#+BEGIN_SRC emacs-lisp

(require 'org-element)

(defun me/org-file-from-subtree (&optional name)
"Cut the subtree currently being edited and create a new file
from it.

If called with the universal argument, prompt for new filename,
otherwise use the subtree title."
  (interactive "P")
  (org-back-to-heading)
  (let ((filename (cond
                   (current-prefix-arg
                    (expand-file-name
                     (read-file-name "New file name: ")))
                   (t
                    (concat
                     (expand-file-name
                      (org-element-property :title
                                            (org-element-at-point))
                      default-directory)
                     ".org")))))
    (org-cut-subtree)
    (find-file-noselect filename)
    (with-temp-file filename
      (org-mode)
      (yank))))
#+END_SRC

**** Trying to take care of the footnotes
The previous solution works. The only problem is that when I refiling a subtree that has footnote, the footnotes are left behind. Here's a question that I posted on [[http://stackoverflow.com/questions/33885244/emacs-org-mode-how-can-i-refile-a-subtree-to-a-new-file?noredirect%3D1#comment55607485_33885244][stack-overflow]], and this is an attempt to implement one suggestion that was made:

# #+BEGIN_SRC emacs-lisp
# (let (footnote) (save-excursion (org-back-to-heading t) (org-narrow-to-subtree) (while (re-search-forward "\\[fn:[0-9]+\\]" nil t) (push (cons (buffer-substring-no-properties (match-beginning 0) (match-end 0)) nil) footnote)) (widen) (org-end-of-subtree t t) (setq footnote (mapcar (lambda (x) (and (search-forward (car x) nil t nil) (cons (car x) (buffer-substring-no-properties (match-beginning 0) (point-at-eol))))) footnote))) footnote
# )
# #+END_SRC
*** Org-Reveal
**** Repo
https://github.com/yjwen/org-reveal
**** Package loading
#+BEGIN_SRC emacs-lisp

 (use-package ox-reveal
 :ensure t
 :config
 (setq org-reveal-root "~/dev/reveal/reveal.js"))

#+END_SRC

#+BEGIN_SRC emacs-lisp
; (require 'ox-reveal)
; (setq org-reveal-root "file:///dev/reveal.js")
#+END_SRC

#+RESULTS:
: file:///Users/ygilad/dev/reveal/js/reveal.js


# *** MobileOrg

#+BEGIN_SRC emacs-lisp
;; Setting up MobileOrg
;; Set to the location of your Org files on your local system
(setq org-directory "~/Dropbox/Notes/")
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Dropbox/Notes/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
;; Tell Emacs which org files it should push to MobileOrg
(setq org-mobile-files '("~/Dropbox/Notes/"))
;; Set the inbox file where on the fly todos and notes will be captured
(setq org-default-notes-file "~/Dropbox/Notes/inbox.org")
#+END_SRC
    

** Email
*** Mu4e
#+BEGIN_SRC emacs-lisp 
;; the exact path may differ -- check it
(add-to-list 'load-path "/usr/local/Cellar/mu/mu4e")
(setq mu4e-mu-binary (executable-find "/usr/local/Cellar/mu/mu/mu"))
(require 'mu4e)

;; default
(setq mu4e-maildir "~/Maildir")
(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Trash")
(setq mu4e-refile-folder  "/[Gmail].All Mail")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; (See the documentation for `mu4e-sent-messages-behavior' if you have
;; additional non-Gmail addresses and want assign them different
;; behavior.)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
    '( ("/INBOX"               . ?i)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap"
      mu4e-update-interval 300)             ;; update every 5 minutes)

;; something about ourselves
(setq
   user-mail-address "yanivdll@gmail.com"
   user-full-name  "Yaniv Gilad"
   mu4e-compose-signature
    (concat
      "--\n"
      "http://prodissues.com\n"))

;; sending mail -- gmail smtp settings
(setq message-send-mail-function 'smtpmail-send-it
     smtpmail-stream-type 'ssl
     smtpmail-default-smtp-server "smtp.gmail.com"
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 465)

;;viewing messages
;(setq mu4e-view-prefer-html t)

;; don't save messages to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; skipping duplicate messages (due to the way the labels / virtual folders in Gmail are represented)
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

**** Adding support for html emails

#+BEGIN_SRC emacs-lisp
;; use Emac's 24.4 shr html renderer
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)

;; define keybindings for intuitive link navigation within an email, using tab and backtab (shift-tab)
(add-hook 'mu4e-view-mode-hook
  (lambda()
     ;; try to emulate some of the eww key-bindings
    (local-set-key (kbd "<tab>") 'shr-next-link)
    (local-set-key (kbd "<backtab>") 'shr-previous-link)))

#+END_SRC

**** Additional customizations
#+BEGIN_SRC emacs-lisp
;; Set the number of messages to show on the header view, when in split view
(setq mu4e-headers-visible-lines 12)

;; smart From/To field in the headers view
(setq mu4e-user-mail-address-list '("yaniv@outbrain.com" "ygilad@outbrain.com" "yanivdll@gmail.com" "yanivalerts@gmail.com"))

;; Saving attachments to a specific folder
(setq mu4e-attachment-dir  "~/Downloads")

;; enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
   (imagemagick-register-types))
#+END_SRC

;; enable attachments from dired
#+BEGIN_SRC emacs-lisp :tangle no
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode
#+END_SRC
*** Wanderlust
#+BEGIN_SRC emacs-lisp
;; Email
; (autoload 'wl "wl" "Wanderlust" t)
#+END_SRC

** Evil (inactive)
*** Package loading

#+BEGIN_SRC emacs-lisp :tangle no
;; Evil mode

(use-package evil
;:ensure t  ;I commented this out because it kept downloading it from elpa, where there is an old version
:config 
(evil-mode 1)
)
#+END_SRC

*** Key bindings

#+BEGIN_SRC emacs-lisp :tangle no
; Modify keybindings for N state
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "$") 'evil-end-of-visual-line)
(define-key evil-normal-state-map (kbd "0") 'evil-beginning-of-visual-line)

; Modify keybindings for V state
(define-key evil-visual-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-visual-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-visual-state-map (kbd "$") 'evil-end-of-visual-line)
(define-key evil-visual-state-map (kbd "0") 'evil-beginning-of-visual-line)

;When in deft this keybinding will open the note in another window
(define-key evil-normal-state-map (kbd "C-o")'deft-open-file-other-window) 
#+END_SRC

**** TODO Load chord-keys to allow 'dd' to delete visual line

* Look and feel
** Themes
*** Disable all other themes before enabling a new one. 
This should help avoide unwanted inheritance between different themes, and the unexpected results of that.
#+BEGIN_SRC emacs-lisp
 ;;; Disable all themes before loading a new one
 (defadvice load-theme (before theme-dont-propagate activate)
  (mapcar #'disable-theme custom-enabled-themes))
#+END_SRC
*** Load the solarized theme
**** solarized-emacs
***** Repo
https://github.com/bbatsov/solarized-emacs
***** Load theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
:ensure t
:config 
(setq solarized-scale-org-headlines nil))

#+END_SRC

** Fonts
*** Input fonts
**** Reference
- Learned about it first in [[https://blog.fugue.co/2015-11-11-guide-to-emacs.html][A CEO's Guide to Emacs]]
- [[http://input.fontbureau.com/][Link to the input site]]
**** Settings
# #+BEGIN_SRC emacs-lisp
# ;; set up fonts for different OSes. OSX toggles to full screen.
# (setq myfont "Input")
# (cond
# ((string-equal system-name "ygilad.local")
#  (set-face-attribute 'default nil :font myfont :height 144)
#  (toggle-frame-fullscreen))
# )
# #+END_SRC
* Internet Relay Chat

  IRC is a great way to hang out with other Emacs geeks.
  #+begin_src emacs-lisp
    (use-package erc
      :ensure t :defer t
      :config
      (setq erc-hide-list '("PART" "QUIT" "JOIN"))
      (setq erc-autojoin-channels-alist '(("freenode.net"
                                           "#org-mode"
                                           "#emacs"
             "#emacs-beginners"))
            erc-server "irc.freenode.net"
            erc-nick "yanivg"))
  #+end_src

* Temp
** Typewriter mode
*** Load package
#+BEGIN_SRC emacs-lisp
(use-package draft-mode
:ensure t)
#+END_SRC
** Dictionaries
*** External dictionary

#+BEGIN_SRC emacs-lisp
(autoload 'ispell-get-word "ispell")
(defun lookup-word (word)
  (interactive (list (save-excursion (car (ispell-get-word nil)))))
  (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))

(global-set-key (kbd "M-#") 'lookup-word)
#+END_SRC
*** Synosaurus
**** Load package
#+BEGIN_SRC emacs-lisp :tangle no
(use-package synosaurus
:ensure t)

#+END_SRC
*** synonymous
**** Load package

#+BEGIN_SRC emacs-lisp
(use-package synonymous
:ensure t)
#+END_SRC

**** Keybinding

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'synonymous-synonyms)
(global-set-key (kbd "C-c S") 'synonymous-antonyms)
#+END_SRC

*** define-word package
- Blog post about it - http://oremacs.com/2015/05/22/define-word/
**** Load package
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :pin melpa)

#+END_SRC

**** Keybinding
#+BEGIN_SRC emacs-lisp :tangle no
(global-set-key (kbd "C-c d") 'define-word-at-point)
(global-set-key (kbd "C-c D") 'define-word)

#+END_SRC
** Ivy-mode
*** Reference
- [[https://github.com/abo-abo/swiper/blob/master/doc/ivy.org][Manual]]
- [[http://oremacs.com][Homepage]]
- [[https://github.com/abo-abo/swiper][Git]]
- [[https://www.youtube.com/watch?v%3DVvnJQpTFVDc][Video demo]]
*** Load package
#+BEGIN_SRC emacs-lisp

(use-package swiper
:ensure t)

#+END_SRC
